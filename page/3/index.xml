<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>radu&#39;s blog</title>
    <link>https://radu-matei.com/</link>
    <description>Recent content on radu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; &lt;a href=&#34;https://twitter.com/matei_radu&#34; rel=&#34;noreferrer&#34; target=&#34;_blank&#34;&gt;Radu Matei&lt;/a&gt; 2023</copyright>
    <lastBuildDate>Wed, 22 Mar 2023 16:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://radu-matei.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    
    <item>
      <title>TensorFlow inferencing using WebAssembly and WASI</title>
      <link>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</link>
      <pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</guid>
      <description>In this article, we experiment with building a Rust program that performs image classification using the MobileNet V2 TensorFlow model, compile it to WebAssembly, and instantiate the module using two WebAssembly runtimes that use the WebAssembly System Interface (WASI), the native NodeJS WASI runtime, and Wasmtime. A special interest is given to writing model and image data into the moduleâ€™s linear memory, with implementations in both JavaScript and Rust. Finally, a simple prediction API is exemplified running on top of the Wasmtime runtime, and some limitations of this approach are discussed.</description>
    </item>
    
    <item>
      <title>Towards sockets and networking in WebAssembly and WASI</title>
      <link>https://radu-matei.com/blog/towards-sockets-networking-wasi/</link>
      <pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/towards-sockets-networking-wasi/</guid>
      <description>In this article we look at the current state of the networking API in WASI, and add a minimal implementation together with socket clients in AssemblyScript and Rust (with an upfront disclaimer that this should definitely not be used for anything other than experimentation).</description>
    </item>
    
    <item>
      <title>Introduction to Brigade - video demo</title>
      <link>https://radu-matei.com/blog/brigade-intro/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/brigade-intro/</guid>
      <description>Video demonstration of getting started with Brigade</description>
    </item>
    
    <item>
      <title>Getting started with NodeJS and the WebAssembly System Interface</title>
      <link>https://radu-matei.com/blog/nodejs-wasi/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/nodejs-wasi/</guid>
      <description>NodeJS recently added experimental support for executing WebAssembly modules using WASI, or the WebAssembly System Interface. In this article we explore how to get started with the WASI sandbox and writing various modules we can execute, in Rust, or AssemblyScript.</description>
    </item>
    
    <item>
      <title>Writing a simple WASM API layer using interface types and Wasmtime</title>
      <link>https://radu-matei.com/blog/wasm-api-witx/</link>
      <pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://radu-matei.com/blog/wasm-api-witx/</guid>
      <description>In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</description>
    </item>
    
  </channel>
</rss>
