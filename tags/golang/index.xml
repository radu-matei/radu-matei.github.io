<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on radu&#39;s blog</title>
    <link>https://radu-matei.com/tags/golang/</link>
    <description>Recent content in Golang on radu&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Radu Matei</copyright>
    <lastBuildDate>Sun, 12 Jan 2020 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://radu-matei.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>From (C)Go to Rust: A practical guide to building shared and static libraries, linking, and FFI</title>
      <link>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</guid>
      <description>In this article we will explore how to build shared and static libraries in Go, and import them in Rust.</description>
    </item>
    <item>
      <title>Securely distributing and signing WebAssembly modules using OCI and TUF</title>
      <link>https://radu-matei.com/blog/wasm-oci-tuf/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/wasm-oci-tuf/</guid>
      <description>Attacks on software repositories happen all the time, and any future WebAssembly repository and client tooling should be prepared to mitigate these attacks. In this article we will explore a minimum security model for WebAssembly registries and client tooling based on The Update Framework, and how to integrate this model when distributing WebAssembly modules using OCI registries.</description>
    </item>
    <item>
      <title>Distributing WebAssembly modules using OCI registries</title>
      <link>https://radu-matei.com/blog/wasm-to-oci/</link>
      <pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/wasm-to-oci/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://radu-matei.com/img/article-photos/wasm-to-oci/wasm-to-oci.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://webassembly.org&#34;&gt;WebAssembly (WASM)&lt;/a&gt; &lt;em&gt;is a binary instruction format for a stack-based virtual machine.&lt;/em&gt; In familiar terms, WASM is used as a compilation target for various programming languages (C, C++, Rust, or Golang, for example), generating a compact binary with a known format. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts&#34;&gt;Mozilla Developer Network describes&lt;/a&gt; WebAssembly as having &lt;em&gt;huge implications for the web platform — it provides a way to run code written in multiple languages on the web at near native speed, with client apps running on the web that previously couldn’t have done so.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rendering Helm templates in the browser, with WebAssembly</title>
      <link>https://radu-matei.com/blog/helm-wasm/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/helm-wasm/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been trying to find a weekend to play around with Web Assembly for at least&#xA;a couple of months now - I had previously read the &lt;em&gt;hello world&lt;/em&gt; examples for&#xA;both Go and Rust, but never had the time to actually try things out. So I&#xA;decided to take a piece of real world Go code, that is used today in Helm, and&#xA;see if I can get it to execute in the browser - I chose to replicate a simpler&#xA;version of &lt;code&gt;helm template&lt;/code&gt;, where you input the template, values file, and&#xA;metadata in the web page, and the rendered template gets printed out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>kube-toolkit: Toolkit for creating gRPC-based CLI tools for Kubernetes, written in Go</title>
      <link>https://radu-matei.com/blog/kube-toolkit/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/kube-toolkit/</guid>
      <description>Building tools like Helm and Draft for Kubernetes using gRPC and Go</description>
    </item>
    <item>
      <title>Update Azure Container Instances with Docker Hub webhooks</title>
      <link>https://radu-matei.com/blog/aci-update/</link>
      <pubDate>Thu, 14 Dec 2017 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/aci-update/</guid>
      <description>Back in July, Microsoft announced Azure Container Instances, a new Azure service delivering containers with great simplicity and speed and without any Virtual Machine infrastructure to manage. ACIs are the fastest and easiest way to run a container in the cloud. In this article we will see how to update Azure Container Instances based on webhooks from Docker Hub</description>
    </item>
  </channel>
</rss>
