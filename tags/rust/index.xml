<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on radu's blog</title><link>https://radu-matei.com/tags/rust/</link><description>Recent content in Rust on radu's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>radu@matei.ai (Radu Matei)</managingEditor><webMaster>radu@matei.ai (Radu Matei)</webMaster><copyright>Radu Matei</copyright><lastBuildDate>Thu, 20 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://radu-matei.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>A practical guide to WebAssembly memory</title><link>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</guid><description>Memory in WebAssembly is one of the topics that creates confusion for newcomers, particularly for those with experience in languages with memory management features like garbage collection, such as JavaScript, Go, or Java. In this article we explore using memory in WebAssembly in various scenarios - passing JavaScript arrays to Rust and AssemblyScript modules, checking for some basic memory leaks using Valgrind, or exchanging strings between runtimes and modules using Wasmtime.</description></item><item><title>From (C)Go to Rust: A practical guide to building shared and static libraries, linking, and FFI</title><link>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</link><pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/from-go-to-rust-static-linking-ffi/</guid><description>In this article we will explore how to build shared and static libraries in Go, and import them in Rust.</description></item><item><title>Building host implementations for WebAssembly interfaces</title><link>https://radu-matei.com/blog/wasm-components-host-implementations/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-components-host-implementations/</guid><description>WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article introduces host implementations, and how to use tooling from the Bytecode Alliance to build and use such implementations.</description></item><item><title>Introduction to WebAssembly components</title><link>https://radu-matei.com/blog/intro-wasm-components/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/intro-wasm-components/</guid><description>WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article explains the goals of the component model, and showcases how to use tooling from the Bytecode Alliance to build and consume such components.</description></item><item><title>Updates on WAGI, the WebAssembly Gateway Interface</title><link>https://radu-matei.com/blog/wagi-updates/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wagi-updates/</guid><description>New features such as pulling from container registries and outbound HTTP connections are now part of WAGI.</description></item><item><title>An experimental outbound HTTP library for the WebAssembly System Interface</title><link>https://radu-matei.com/blog/wasi-experimental-http/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasi-experimental-http/</guid><description>Send HTTP requests from Rust and AssemblyScript Wasm modules running in Wasmtime</description></item><item><title>TensorFlow inferencing using WebAssembly and WASI</title><link>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</guid><description>In this article, we experiment with building a Rust program that performs image classification using the MobileNet V2 TensorFlow model, compile it to WebAssembly, and instantiate the module using two WebAssembly runtimes that use the WebAssembly System Interface (WASI), the native NodeJS WASI runtime, and Wasmtime. A special interest is given to writing model and image data into the moduleâ€™s linear memory, with implementations in both JavaScript and Rust. Finally, a simple prediction API is exemplified running on top of the Wasmtime runtime, and some limitations of this approach are discussed.</description></item><item><title>Towards sockets and networking in WebAssembly and WASI</title><link>https://radu-matei.com/blog/towards-sockets-networking-wasi/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/towards-sockets-networking-wasi/</guid><description>In this article we look at the current state of the networking API in WASI, and add a minimal implementation together with socket clients in AssemblyScript and Rust (with an upfront disclaimer that this should definitely not be used for anything other than experimentation).</description></item><item><title>Writing a simple WASM API layer using interface types and Wasmtime</title><link>https://radu-matei.com/blog/wasm-api-witx/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-api-witx/</guid><description>In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</description></item><item><title>A beginner's guide to adding a new WASI syscall in Wasmtime</title><link>https://radu-matei.com/blog/adding-wasi-syscall/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/adding-wasi-syscall/</guid><description>In this article, we explore how to add a new system call to WASI, the WebAssembly System Interface, and implement it in Wasmtime</description></item></channel></rss>