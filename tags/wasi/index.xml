<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wasi on radu&#39;s blog</title>
    <link>https://radu-matei.com/tags/wasi/</link>
    <description>Recent content in Wasi on radu&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Radu Matei</copyright>
    <lastBuildDate>Wed, 07 Jul 2021 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://radu-matei.com/tags/wasi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neural network inferencing  for PyTorch and TensorFlow with ONNX, WebAssembly System Interface, and WASI NN</title>
      <link>https://radu-matei.com/blog/wasi-nn-onnx/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/wasi-nn-onnx/</guid>
      <description>WASI NN is a proposal that allows WebAssembly guest modules running outside the browser to perform neural network inferencing by using host-provided implementations that can leverage CPU multi-threading, host optimizations, or hardware devices such as GPUs or TPUs. This article explores the goals of WASI NN, existing implementations, and details a new experimental implementation targeting ONNX, the Open Neural Network Exchange , which allows the either usage of models built with PyTorch or TensorFlow from guest WebAssembly modules.</description>
    </item>
    <item>
      <title>Using Azure services from WebAssembly modules</title>
      <link>https://radu-matei.com/blog/using-azure-services-wasi/</link>
      <pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate>
      <guid>https://radu-matei.com/blog/using-azure-services-wasi/</guid>
      <description>With WAGI, the WebAssembly Gateway Interface, it is easier than ever to build microservices using WebAssembly. In this article, we explore building Wasm modules that use Azure services and how to run them using WAGI.</description>
    </item>
  </channel>
</rss>
