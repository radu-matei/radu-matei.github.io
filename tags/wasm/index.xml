<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wasm on radu's blog</title><link>https://radu-matei.com/tags/wasm/</link><description>Recent content in Wasm on radu's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>radu@matei.ai (Radu Matei)</managingEditor><webMaster>radu@matei.ai (Radu Matei)</webMaster><copyright>Radu Matei</copyright><lastBuildDate>Tue, 05 Sep 2023 16:00:00 +0000</lastBuildDate><atom:link href="https://radu-matei.com/tags/wasm/index.xml" rel="self" type="application/rss+xml"/><item><title>A practical guide to WebAssembly memory</title><link>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/practical-guide-to-wasm-memory/</guid><description>Memory in WebAssembly is one of the topics that creates confusion for newcomers, particularly for those with experience in languages with memory management features like garbage collection, such as JavaScript, Go, or Java. In this article we explore using memory in WebAssembly in various scenarios - passing JavaScript arrays to Rust and AssemblyScript modules, checking for some basic memory leaks using Valgrind, or exchanging strings between runtimes and modules using Wasmtime.</description></item><item><title>Introducing Fermyon Serverless AI</title><link>https://radu-matei.com/blog/introducing-fermyon-serverless-ai/</link><pubDate>Tue, 05 Sep 2023 16:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/introducing-fermyon-serverless-ai/</guid><description>Fermyon Serverless AI gives you the building blocks for integrating Artificial Intelligence into your serverless applications, with AI inferencing for Large Language Models (LLMs) for Llama2 and CodeLlama, support for generating sentence embeddings and storing them in a vector-ready database, built-in key-value storage, and a seamless developer experience.</description></item><item><title>Spin 1.0 — The Developer Tool for Serverless WebAssembly</title><link>https://radu-matei.com/blog/introducing-spin-v1/</link><pubDate>Wed, 22 Mar 2023 16:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/introducing-spin-v1/</guid><description>Introducing the first stable release for Spin, the open source developer tool for building, distributing, and running serverless applications built with WebAssembly.</description></item><item><title>The Six Ways of Optimizing WebAssembly</title><link>https://radu-matei.com/blog/six-ways-optimize-webassembly/</link><pubDate>Thu, 26 Jan 2023 02:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/six-ways-optimize-webassembly/</guid><description>This post is co-authored with Matt Butcher, and it originally appeared on InfoQ.com.
Key Takeaways While many languages support Wasm, some are faster than others. Some compilers natively support optimizing Wasm for efficiency and speed. The wasm-opt tool can optimize a Wasm binary regardless of the original language it was used to create it. Using a JIT-enabled runtime can improve runtime performance depending on the hardware platform you are using. Some Wasm runtimes can even compile applications ahead-of-time (AOT) to reach native execution speed.</description></item><item><title>Building host implementations for WebAssembly interfaces</title><link>https://radu-matei.com/blog/wasm-components-host-implementations/</link><pubDate>Thu, 20 Jan 2022 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-components-host-implementations/</guid><description>WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article introduces host implementations, and how to use tooling from the Bytecode Alliance to build and use such implementations.</description></item><item><title>Introduction to WebAssembly components</title><link>https://radu-matei.com/blog/intro-wasm-components/</link><pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/intro-wasm-components/</guid><description>WebAssembly and WASI show great promise for the future of computing outside the browser, and the WebAssembly component model aims to improve the portability, cross-language, and composition story for Wasm. This article explains the goals of the component model, and showcases how to use tooling from the Bytecode Alliance to build and consume such components.</description></item><item><title>Neural network inferencing for PyTorch and TensorFlow with ONNX, WebAssembly System Interface, and WASI NN</title><link>https://radu-matei.com/blog/wasi-nn-onnx/</link><pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasi-nn-onnx/</guid><description>WASI NN is a proposal that allows WebAssembly guest modules running outside the browser to perform neural network inferencing by using host-provided implementations that can leverage CPU multi-threading, host optimizations, or hardware devices such as GPUs or TPUs. This article explores the goals of WASI NN, existing implementations, and details a new experimental implementation targeting ONNX, the Open Neural Network Exchange , which allows the either usage of models built with PyTorch or TensorFlow from guest WebAssembly modules.</description></item><item><title>Using Azure services from WebAssembly modules</title><link>https://radu-matei.com/blog/using-azure-services-wasi/</link><pubDate>Tue, 11 May 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/using-azure-services-wasi/</guid><description>With WAGI, the WebAssembly Gateway Interface, it is easier than ever to build microservices using WebAssembly. In this article, we explore building Wasm modules that use Azure services and how to run them using WAGI.</description></item><item><title>Updates on WAGI, the WebAssembly Gateway Interface</title><link>https://radu-matei.com/blog/wagi-updates/</link><pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wagi-updates/</guid><description>New features such as pulling from container registries and outbound HTTP connections are now part of WAGI.</description></item><item><title>An experimental outbound HTTP library for the WebAssembly System Interface</title><link>https://radu-matei.com/blog/wasi-experimental-http/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasi-experimental-http/</guid><description>Send HTTP requests from Rust and AssemblyScript Wasm modules running in Wasmtime</description></item><item><title>A simple WebAssembly linker in JavaScript</title><link>https://radu-matei.com/blog/a-simple-wasm-linker-js/</link><pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/a-simple-wasm-linker-js/</guid><description>An experimental JavaScript library that helps instantiating WebAssembly modules with imports by providing functionality to link JavaScript objects as imports, as well as automatically perform name based resolution for linking entire modules.</description></item><item><title>TensorFlow inferencing using WebAssembly and WASI</title><link>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/tensorflow-inferencing-wasi/</guid><description>In this article, we experiment with building a Rust program that performs image classification using the MobileNet V2 TensorFlow model, compile it to WebAssembly, and instantiate the module using two WebAssembly runtimes that use the WebAssembly System Interface (WASI), the native NodeJS WASI runtime, and Wasmtime. A special interest is given to writing model and image data into the module’s linear memory, with implementations in both JavaScript and Rust. Finally, a simple prediction API is exemplified running on top of the Wasmtime runtime, and some limitations of this approach are discussed.</description></item><item><title>Towards sockets and networking in WebAssembly and WASI</title><link>https://radu-matei.com/blog/towards-sockets-networking-wasi/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/towards-sockets-networking-wasi/</guid><description>In this article we look at the current state of the networking API in WASI, and add a minimal implementation together with socket clients in AssemblyScript and Rust (with an upfront disclaimer that this should definitely not be used for anything other than experimentation).</description></item><item><title>Getting started with NodeJS and the WebAssembly System Interface</title><link>https://radu-matei.com/blog/nodejs-wasi/</link><pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/nodejs-wasi/</guid><description>NodeJS recently added experimental support for executing WebAssembly modules using WASI, or the WebAssembly System Interface. In this article we explore how to get started with the WASI sandbox and writing various modules we can execute, in Rust, or AssemblyScript.</description></item><item><title>Writing a simple WASM API layer using interface types and Wasmtime</title><link>https://radu-matei.com/blog/wasm-api-witx/</link><pubDate>Tue, 23 Jun 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-api-witx/</guid><description>In this short article we explore how to get started with WebAssembly interface types by defining a simple API layer, then implementing that using Wiggle and Wasmtime</description></item><item><title>A beginner's guide to adding a new WASI syscall in Wasmtime</title><link>https://radu-matei.com/blog/adding-wasi-syscall/</link><pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/adding-wasi-syscall/</guid><description>In this article, we explore how to add a new system call to WASI, the WebAssembly System Interface, and implement it in Wasmtime</description></item><item><title>Securely distributing and signing WebAssembly modules using OCI and TUF</title><link>https://radu-matei.com/blog/wasm-oci-tuf/</link><pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-oci-tuf/</guid><description>Attacks on software repositories happen all the time, and any future WebAssembly repository and client tooling should be prepared to mitigate these attacks. In this article we will explore a minimum security model for WebAssembly registries and client tooling based on The Update Framework, and how to integrate this model when distributing WebAssembly modules using OCI registries.</description></item><item><title>Distributing WebAssembly modules using OCI registries</title><link>https://radu-matei.com/blog/wasm-to-oci/</link><pubDate>Sun, 13 Oct 2019 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/wasm-to-oci/</guid><description>WebAssembly (WASM) is a binary instruction format for a stack-based virtual machine. In familiar terms, WASM is used as a compilation target for various programming languages (C, C++, Rust, or Golang, for example), generating a compact binary with a known format. Mozilla Developer Network describes WebAssembly as having huge implications for the web platform — it provides a way to run code written in multiple languages on the web at near native speed, with client apps running on the web that previously couldn’t have done so.</description></item><item><title>Rendering Helm templates in the browser, with WebAssembly</title><link>https://radu-matei.com/blog/helm-wasm/</link><pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate><author>radu@matei.ai (Radu Matei)</author><guid>https://radu-matei.com/blog/helm-wasm/</guid><description>I&amp;rsquo;ve been trying to find a weekend to play around with Web Assembly for at least a couple of months now - I had previously read the hello world examples for both Go and Rust, but never had the time to actually try things out. So I decided to take a piece of real world Go code, that is used today in Helm, and see if I can get it to execute in the browser - I chose to replicate a simpler version of helm template, where you input the template, values file, and metadata in the web page, and the rendered template gets printed out.</description></item></channel></rss>